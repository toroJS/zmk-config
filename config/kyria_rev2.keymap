/*
 * Copyright (c) 2021 Jaromír Malenko
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>  /*changes*/

#define BASE  0
#define NAV   1
#define NUM   2
#define FUN   3
#define PREV_WORD LC(LEFT)
#define NEXT_WORD LC(RIGHT)
#define BEG_DOC   LC(HOME)
#define END_DOC   LC(END)/*                            KEY POSITIONS
  ╭────────────────────────╮                 ╭────────────────────────╮
  │  0   1   2   3   4   5 │                 │  6   7   8   9  10  11 │
  │ 12  13  14  15  16  17 ╰───────╮ ╭───────╯ 18  19  20  21  22  23 │
  │ 24  25  26  27  28  29  30  31 │ │ 32  33  34  35  36  37  38  39 │
  ╰───────────╮ 40  41  42  43  44 │ │ 45  46  47  48  49 ╭───────────╯
              ╰────────────────────╯ ╰────────────────────╯            */
/ {
    combos {
        compatible = "zmk,combos";

        combo_grave {
            timeout-ms = <50>;
            key-positions = <0 13>;
            bindings = <&kp GRAVE>;
        };

        combo_exclamation {
            timeout-ms = <50>;
            key-positions = <1 13>;
            bindings = <&kp EXCL>;
        };

        combo_at {
            timeout-ms = <50>;
            key-positions = <2 14>;
            bindings = <&kp AT>;
        };

        combo_hash {
            timeout-ms = <50>;
            key-positions = <3 15>;
            bindings = <&kp HASH>;
        };

        combo_dollar {
            timeout-ms = <50>;
            key-positions = <4 16>;
            bindings = <&kp DLLR>;
        };

        combo_percent {
            timeout-ms = <50>;
            key-positions = <5 17>;
            bindings = <&kp PRCNT>;
        };

        combo_caret {
            timeout-ms = <50>;
            key-positions = <6 18>;
            bindings = <&kp CARET>;
        };

        combo_ampersand {
            timeout-ms = <50>;
            key-positions = <7 19>;
            bindings = <&kp AMPS>;
        };

        combo_asterisk {
            timeout-ms = <50>;
            key-positions = <8 20>;
            bindings = <&kp STAR>;
        };

        combo_left_parenthesis {
            timeout-ms = <50>;
            key-positions = <9 21>;
            bindings = <&kp LPAR>;
        };

        combo_right_parenthesis {
            timeout-ms = <50>;
            key-positions = <10 22>;
            bindings = <&kp RPAR>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <11 23>;
            bindings = <&kp MINUS>;
        };

        combo_tilde {
            timeout-ms = <50>;
            key-positions = <12 24>;
            bindings = <&kp TILDE>;
        };

        combo_plus {
            timeout-ms = <50>;
            key-positions = <21 37>;
            bindings = <&kp PLUS>;
        };

        combo_equal {
            timeout-ms = <50>;
            key-positions = <22 38>;
            bindings = <&kp EQUAL>;
        };

        combo_underscore {
            timeout-ms = <50>;
            key-positions = <23 39>;
            bindings = <&kp UNDER>;
        };

        combo_clear_bt {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&bt BT_CLR>;   
        };

        combo_bt_prev {
            timeout-ms = <50>;
            key-positions = <43 44>;
            bindings = <&bt BT_PRV>;   
        };

        combo_bt_next {
            timeout-ms = <50>;
            key-positions = <45 46>;
            bindings = <&bt BT_NXT>;   
        };

        
    };
};

/ {
    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings =
                <&mo>,
                <&tog>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            /* -------------------------------------------------------------                                            -------------------------------------------------------------
   |    ESC  |    Q    |    W    |    E    |    R    |    T    |                                            |    Y    |    U    |    I    |    O    |    P    |    \    |
   |    TAB  |    A    |    S    |    D    |    F    |    G    |--------------------    --------------------|    H    |    J    |    K    |    L    |    ;    |    '    |
   |    SHIFT|    Z    |    X    |    C    |    V    |    B    |    TAB  |    ESC  |    |    BSCP |   DEL   |    N    |    M    |    ,    |    .    |    /    |   CTRL  |
   ------------------------------|   CTRL  |   GUI   |   ALT   |   SPACE |    num  |    |    nav  |   RET   |   ALT   |   CTRL  |  rotary |------------------------------
                                 ---------------------------------------------------    ---------------------------------------------------                               */

            bindings = <
   &kp ESC   &kp Q   &kp W     &kp E     &kp R      &kp T                                                                         &kp Y      &kp U       &kp I    &kp O     &kp P  &kp BACKSPACE
   &kp TAB   &kp A   &kp S     &kp D     &kp F      &kp G                                                                         &kp H      &kp J       &kp K    &kp L  &kp SEMI        &kp SQT
 &kp LGUI   &kp Z   &kp X     &kp C     &kp V      &kp B  &kp LEFT_BRACKET  &kp EXCLAMATION      &kp PIPE  &kp RIGHT_BRACKET     &kp N      &kp M   &kp COMMA  &kp DOT  &kp FSLH      &kp EQUAL
                            &kp LCTRL  &kp LALT  &kp LSHFT         &lt 2 RET         &lt 3 AT  &kp QUESTION        &lt 1 SPACE  &kp RALT  &kp RCTRL  &kp C_MUTE
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        nav_layer {
            bindings = <
 &trans   &none   &none   &none   &none   &none                                         &none     &kp PG_UP    &kp UP      &kp PG_DN        &none   &none
 &trans   &none   &none   &none   &none   &none                                      &kp HOME      &kp LEFT  &kp DOWN      &kp RIGHT      &kp END   &none
 &trans   &none   &none   &none   &none   &none  &trans  &trans  &trans  &trans  &kp LC(HOME)  &kp LC(LEFT)     &none  &kp LC(RIGHT)  &kp LC(END)   &none
                         &trans  &trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans    &trans
            >;
        };

        num_layer {
            bindings = <
 &kp RBKT   &kp EXCL     &kp AT  &kp HASH  &kp DLLR  &kp PRCNT                                   &kp STAR     &kp N7  &kp N8  &kp N9  &kp EQUAL    &kp DOT
 &kp LBKT   &kp AMPS  &kp CARET  &kp LPAR  &kp RPAR   &kp PIPE                                   &kp PLUS     &kp N4  &kp N5  &kp N6   &kp SEMI  &kp COLON
   &trans  &kp TILDE  &kp GRAVE    &kp LT    &kp GT  &kp UNDER  &trans  &trans  &trans  &trans  &kp MINUS     &kp N1  &kp N2  &kp N3   &kp FSLH   &kp BSLH
                                   &trans    &trans     &trans  &trans  &trans  &trans  &trans     &kp N0  &kp COMMA  &trans
            >;
        };

        fun_layer {
            bindings = <
 &trans  &kp F21  &kp F22  &kp F23  &kp F24   &kp SLCK                                  &kp C_VOL_UP  &kp F7  &kp F8  &kp F9  &kp F12        &kp C_PREV
 &trans  &kp F17  &kp F18  &kp F19  &kp F20  &kp PSCRN                                  &kp C_VOL_DN  &kp F4  &kp F5  &kp F6  &kp F11  &kp C_PLAY_PAUSE
 &trans  &kp F13  &kp F14  &kp F15  &kp F16    &kp INS  &trans  &trans  &trans  &trans    &kp C_MUTE  &kp F1  &kp F2  &kp F3  &kp F10        &kp C_NEXT
                            &trans   &trans     &trans  &trans  &trans  &trans  &trans        &trans  &trans  &trans
            >;
        };
    };
};
